package db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import userProfile.User;

/**
 * The UserDAO class provides methods for performing database operations related to user data,
 * including inserting and retrieving user records in the `staff` table.
 * This class uses DatabaseConnection to establish connections with the database.
 *
 * Note: This DAO is designed specifically for managing user accounts in the media streaming service application.
 * 
 * 
 * @author Trudy Ann Roberts
 */
public class UserDAO {
	
    /**
     * Inserts a new user record into the database.
     * 
     * @param user The User object containing user details such as first name, last name, email, and username.
     * @param hashedPassword The hashed password to store in the database.
     * @return The user ID of the newly inserted user if successful, or -1 if registration fails.
     * @throws SQLException If a database access error occurs or the query fails.
     */
    public static int insertUserIntoDatabase(User user, String hashedPassword) {
        String query = "INSERT INTO staff (first_name, last_name, address_id, email, store_id, active, username, password, last_update) " +
                       "VALUES (?, ?, 1, ?, 1, 1, ?, ?, NOW())";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS)) {

            pstmt.setString(1, user.getFirstName());
            pstmt.setString(2, user.getLastName());
            pstmt.setString(3, user.getEmail());
            pstmt.setString(4, user.getUsername());
            pstmt.setString(5, hashedPassword);

            int rowsAffected = pstmt.executeUpdate();

            if (rowsAffected > 0) {
                // Retrieve the user ID generated by the database
                ResultSet generatedKeys = pstmt.getGeneratedKeys();
                if (generatedKeys.next()) {
                    return generatedKeys.getInt(1); // Return the new user ID
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
            e.printStackTrace();
        }
        return -1; // Indicate failure to register the user
    } 
    
    /**
     * Retrieves a User object from the database based on the provided username.
     * 
     * @param username The username of the user to retrieve.
     * @return A User object containing the user's details if found, or null if no user is found.
     * @throws SQLException If a database access error occurs or the query fails.
     */
    public static User retrieveUserFromDatabase(String username) {
        String query = "SELECT * FROM staff WHERE username = ?";
        User user = null;

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {

            pstmt.setString(1, username);
            ResultSet resultSet = pstmt.executeQuery();

            if (resultSet.next()) {
                // Retrieve user details and create a new User object
                String userId = resultSet.getString("staff_id");
                String firstName = resultSet.getString("first_name");
                String lastName = resultSet.getString("last_name");
                String email = resultSet.getString("email");
                String storedHashedPassword = resultSet.getString("password");

                user = new User(Integer.parseInt(userId), firstName, lastName, email, username, storedHashedPassword);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
            e.printStackTrace();
        }
        return user;
    }
}
